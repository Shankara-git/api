{
    "swagger": "2.0",
    "info": {
        "description": "Kochava IAM API",
        "title": "Kochava IAM API",
        "version": "1.3"
    },
    "host": "localhost:8080",
    "basePath": "/service/",
    "paths": {
        "/logos/upload": {
            "post": {
                "description": "This endpoint is used for uploading an organization logo.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Upload the logo for an organization",
                "consumes": [
                    "multipart/form-data"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Upload the logo for an organization. The file format should be JPEG, JPG, or PNG, and the maximum file size should be 5MB or less.",
                        "name": "file",
                        "in": "formData",
                        "required": true,
                        "type": "file"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/upload.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/logos/download": {
            "post": {
                "description": "This endpoint is used to download the logo for an organization.",
                "produces": [
                    "application/octet-stream",
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Download the logo for an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The request body contains the URL path for downloading the logo.",
                        "name": "LogoDownload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/logo.download"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "string",
                            "format": "binary"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations": {
            "get": {
                "description": "This endpoint is used to retrieve a list of organizations associated with the user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get a list of organizations that the user belongs to",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/organization.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint is used to create a new organization. If operation is successful, the response body \n\r\ncontains the newly created organization details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Create an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The request body includes the details of the organization to be created.",
                        "name": "Organization",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/organization.create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/organization.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}": {
            "put": {
                "description": "This endpoint is used to update an organization details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Update an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body includes the updated information of the organization.",
                        "name": "Organization",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/organization.update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/organization.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to delete an organization. Please note that executing this operation will result in the removal of all the users, user groups, workspaces, resources, invitations and policies associated with the organization being deleted.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Delete an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used to get an organization details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization"
                ],
                "summary": "Get an organization details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/organization.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces": {
            "get": {
                "description": "This endpoint retrieves a list of all the workspaces of an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace"
                ],
                "summary": "Get a list of all the workspaces of an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/organization.work_space.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint is used to create a new workspace. If successful, the response body \n\r\ncontains the newly created workspace details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace"
                ],
                "summary": "Create a workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains the details of the workspace to be created.",
                        "name": "Workspace",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/organization.work_space.create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/organization.work_space.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to delete all the workspaces of an organization. Please note that executing this operation will result in the removal of all resources and policies associated with the workspaces being deleted.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace"
                ],
                "summary": "Delete all workspaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}": {
            "delete": {
                "description": "This endpoint is used to delete a workspace. Please note that executing this operation will result in the removal of all resources and policies associated with the workspace being deleted.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace"
                ],
                "summary": "Delete a workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "put": {
                "description": "This endpoint is used to update the details of workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace"
                ],
                "summary": "Update the details of a workspace.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains the information that needs to be updated for the workspace.",
                        "name": "Workspace",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/organization.work_space.update"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/organization.work_space.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used to retrieve the details of a workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace"
                ],
                "summary": "Get the details of a workspace.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/organization.work_space.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/resources": {
            "post": {
                "description": "This endpoint is used to register a resource to an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Resource"
                ],
                "summary": "Register a resource to an organization",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains the details of the resource to be created.",
                        "name": "Resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resource.create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used to retrieve a list of all resources belonging to an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Resource"
                ],
                "summary": "Get all the resources of an organization",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Get the details of resources belonging to a specific resource type.",
                        "name": "resource-type",
                        "in": "query",
                        "maxLength": 64,
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/resources.list"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/product-name/{product_name}/resources": {
            "get": {
                "description": "This endpoint is used to retrieve the details of an organization resource that belong to a particular product.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Resource"
                ],
                "summary": "Get an organization resource that belong to a particular product",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The resources belonging to the specified product.",
                        "name": "product_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Get the details of resources belonging to a specific resource type.",
                        "name": "resource-type",
                        "in": "query",
                        "maxLength": 64,
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/resources.list"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/product-name/{product_name}/resources/{resource_id}": {
            "get": {
                "description": "This endpoint is used to retrieve the details of of an organization resource.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Resource"
                ],
                "summary": "Get an organization resource",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The resources belonging to the specified resource ID.",
                        "name": "resource_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The resources belonging to the specified product.",
                        "name": "product_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/resource.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to unregister resource from an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Organization Resource"
                ],
                "summary": "Unregister resource from an organization resource",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "ID of the actual resource which is managed or created by the product.",
                        "name": "resource_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The resources belonging to the specified product.",
                        "name": "product_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}/resources": {
            "post": {
                "description": "This endpoint is used to register a resource to the workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace Resource"
                ],
                "summary": "Register a resource to the workspace",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains the details of the resource to be created.",
                        "name": "Resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resource.create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used to get a list of all the resources in a workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace Resource"
                ],
                "summary": "Get a list of all the resources in a workspace",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Get the details of resources belonging to a specific resource type.",
                        "name": "resource-type",
                        "in": "query",
                        "maxLength": 64,
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/resources.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}/product-name/{product_name}/resources": {
            "get": {
                "description": "This endpoint is used to get a list of all the resources in a workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace Resource"
                ],
                "summary": "Get a list of all the resources in a workspace",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Get the details of resources belonging to a specific resource type.",
                        "name": "resource-type",
                        "in": "query",
                        "maxLength": 64,
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "The resources belonging to the specified product.",
                        "name": "product_name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/resources.list"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}/product-name/{product_name}/resources/{resource_id}": {
            "get": {
                "description": "This endpoint is used to retrieve a workspace resource based on its resource ID.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace Resource"
                ],
                "summary": "Get a specific workspace resource",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The workspace resource belonging to the specified resource ID.",
                        "name": "resource_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The resources belonging to the specified product.",
                        "name": "product_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/resource.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to unregister resource from the workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Workspace Resource"
                ],
                "summary": "Unregister resource from the workspace",
                "parameters": [
                    {
                        "in": "header",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/cookie.apikey"
                        }
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique ID of the actual resource which is managed or created by the product.",
                        "name": "resource_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The resources belonging to the specified product.",
                        "name": "product_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/team": {
            "get": {
                "description": "This endpoint is used to get list of user and user-group details of an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Get a list of user and user-group details of an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "enum": [
                            "INVOKED",
                            "PENDING",
                            "ACCEPTED",
                            "REJECTED",
                            "EXPIRED"
                        ],
                        "description": "The status of the invitation.",
                        "name": "status",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/team.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}/team": {
            "get": {
                "description": "This endpoint is used to get list of user and user-group details of a workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Get a list of user and user-group details of a workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "enum": [
                            "INVOKED",
                            "PENDING",
                            "ACCEPTED",
                            "REJECTED",
                            "EXPIRED"
                        ],
                        "description": "The status of the invitation.",
                        "name": "status",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/team.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/team/delete": {
            "post": {
                "description": "This endpoint is used to delete a list of users and user groups in the organization team.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Delete a list of users and user groups in the organization team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body includes a list of users IDs and user groups IDs that are being deleted.",
                        "name": "team_delete",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/team.delete.list"
                        }
                    }
                ],
                "responses": {
                    "207": {
                        "description": "Multi-Status",
                        "schema": {
                            "$ref": "#/definitions/team.multi.status.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}/team/delete": {
            "post": {
                "description": "This endpoint is used to delete a list of users and user groups in the workspace team.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Team"
                ],
                "summary": "Delete a list of users and user groups in the workspace team",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body includes a list of users IDs and user groups IDs that are being deleted.",
                        "name": "team_delete",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/team.delete.list"
                        }
                    }
                ],
                "responses": {
                    "207": {
                        "description": "Multi-Status",
                        "schema": {
                            "$ref": "#/definitions/team.multi.status.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/users": {
            "get": {
                "description": "This endpoint is used to retrieve a list of all the users of an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get a list of all the users of an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to delete all users of an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete all users of an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/users/{user_id}": {
            "get": {
                "description": "This endpoint is used to retrieve information about a user of an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get the details of a user of an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user.",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to delete an organization user.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete an organization user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user that is being deleted.",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "delete": {
                "description": "This endpoint is used to delete a user from all organizations.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete a user from all organizations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user that is being deleted from all organizations.",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/user-groups": {
            "get": {
                "description": "This endpoint is used to retrieve a list of all user groups of an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Group"
                ],
                "summary": "Get a list of all user groups of an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.user.groups.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint is used to create a new user group. If the request is successful, the response body will contain the newly created user group details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Group"
                ],
                "summary": "Create a user group of an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body should contain the necessary details of the user group that needs to be created.",
                        "name": "UserGroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.user.group"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.user.groups"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to delete all user groups from the organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Group"
                ],
                "summary": "Delete all user groups from the organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/user-groups/{group_id}/users": {
            "get": {
                "description": "This endpoint is used to retrieve a list of all users of the user group.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Group"
                ],
                "summary": "Get a list of all the users of the user group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The user belongs to the specified User Group ID.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/users.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "post": {
                "description": "This endpoint is used to add users to the user group.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Group"
                ],
                "summary": "Add users to the user group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The users will be added to the specified User Group.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body includes a list of user IDs that will be added to the user group.",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.id.invite"
                        }
                    }
                ],
                "responses": {
                    "207": {
                        "description": "Multi-Status",
                        "schema": {
                            "$ref": "#/definitions/multi_status.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/user-groups/{group_id}": {
            "get": {
                "description": "This endpoint is used to retrieve information about a user group of an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Group"
                ],
                "summary": "Get the details of a user group of an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user group of an organization.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.user.groups"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to delete a user group of an organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Group"
                ],
                "summary": "Delete a user group of an organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Unique ID of the user group to be removed from the organization.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "put": {
                "description": "This endpoint is used to update an organization user group.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Group"
                ],
                "summary": "Update an organization user group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user group of an organization.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains the updated details of the user group.",
                        "name": "UserGroup",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.user.group"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.user.groups"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/user-groups/{group_id}/users/{user_id}": {
            "delete": {
                "description": "This endpoint is used to remove a user from a user group.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Group"
                ],
                "summary": "Remove a user from a user group",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user group from which the user is being deleted.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user that is being removed from the user group.",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/user-invitations": {
            "post": {
                "description": "This endpoint is used to send an invitation to users to join the organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Invite"
                ],
                "summary": "Send an invitation to users to join the organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains the details of the user invitation to be created.",
                        "name": "UserInvite",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 20,
                            "items": {
                                "$ref": "#/definitions/user.invite"
                            }
                        }
                    }
                ],
                "responses": {
                    "207": {
                        "description": "Multi-Status",
                        "schema": {
                            "$ref": "#/definitions/multi_status.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used to retrieve a list of all invitations within the organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Invite"
                ],
                "summary": "Get a list of all invitations within the organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invite.invitationData.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/user-invitations": {
            "get": {
                "description": "This endpoint is used to retrieve a list of all sent or received invitations.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Invite"
                ],
                "summary": "Get a list of all sent or received invitations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "enum": [
                            "sent",
                            "received"
                        ],
                        "description": "The type of invitation: sent or received.",
                        "name": "type",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/invitation.sent.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/user-invitations/{invitation_id}": {
            "put": {
                "description": "This endpoint is used to accept or reject an invitation.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Invite"
                ],
                "summary": "Accept or reject an invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The generated unique ID of the invitation.",
                        "name": "invitation_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains the information about the accept or reject an organization invitation.",
                        "name": "InviteAction",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/invite.acceptInvite"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to revoke an organization invitation.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User Invite"
                ],
                "summary": "Revoke an organization invitation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the invitation that is being deleted.",
                        "name": "invitation_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/resource-types": {
            "post": {
                "description": "This endpoint is used to add a resource type.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resource Type"
                ],
                "summary": "Add a resource type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The request body contains the details of the resource type to be created.",
                        "name": "Resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/resource.type.create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used to retrieve a list of all resource types and its operations.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resource Type"
                ],
                "summary": "List resource types and its operations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/resource.types.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/resource-types/{resource_type}": {
            "delete": {
                "description": "This endpoint is used to delete a resource type. Please note that delete will be blocked and thrown error in case that resource type is already been assigned to one of the user. Only after removing those roles from user policy, the delete would be successful.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resource Type"
                ],
                "summary": "Delete a resource type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource type name",
                        "name": "resource_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used to retrieve a list of all operations belong to a resource type.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resource Type"
                ],
                "summary": "List the resource operations",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource type name",
                        "name": "resource_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/resource.types"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/resource-types/{resource_type}/operations": {
            "post": {
                "description": "This endpoint is used to add or delete a list of operations to or from existing resource type. Please note that delete will be blocked and thrown error in case that resource type is already been assigned to one of the user. Only after removing those roles from user policy, the delete would be successful.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resource Type"
                ],
                "summary": "Add or delete a list of operations to or from existing resource type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource type name",
                        "name": "resource_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains list of operation to be added or deleted to or from this resource type.",
                        "name": "Operations",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 2,
                            "$ref": "#/definitions/resource.type.operations"
                        }
                    }
                ],
                "responses": {
                    "207": {
                        "description": "Multi-Status",
                        "schema": {
                            "$ref": "#/definitions/multi_status.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/roles/capability": {
            "post": {
                "description": "This endpoint is used to create a capability, which will be bind to role. If resource type and operation already exist with different capability name, then this api will return the name of the existing capability and user can use existing capability name while creating the role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles Capability"
                ],
                "summary": "Create a capability",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The request body contains the details of the capability to be created.",
                        "name": "Resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/role.capability.create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used retrieve a list of all the capabilities.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles Capability"
                ],
                "summary": "List all the capabilities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/role.capability.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/roles/resource-type/{resource_type}/capability": {
            "get": {
                "description": "This endpoint is used retrieve a list of all the capabilities for the resource type.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles Capability"
                ],
                "summary": "List all the capabilities for the resource type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Resource type name",
                        "name": "resource_type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/resource.capability.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/roles/resource-type/{resource_type}/capability/{capability_name}": {
            "delete": {
                "description": "This endpoint is used to delete a capability. Please note that delete will be blocked and thrown error in case that resource type is already been assigned to one of the user. Only after removing those roles from user policy, the delete would be successful.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles Capability"
                ],
                "summary": "Delete a capability",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Resource type name",
                        "name": "resource_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Capability name",
                        "name": "capability_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used retrieve a details of a capability.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles Capability"
                ],
                "summary": "Get a details of a capability",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Resource type name",
                        "name": "resource_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Capability name",
                        "name": "capability_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/role.capability.get"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/roles": {
            "post": {
                "description": "This endpoint is used to create a role with list of capability.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Create a role with list of capability",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The request body contains the details of the role to be created.",
                        "name": "Resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/role.create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used retrieve a list of all the roles and its capabilities.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "List all the roles and its capabilities",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/role.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/roles/{role_name}": {
            "post": {
                "description": "This endpoint is used to add or delete capabilities in a role. Please note that delete will be blocked and thrown error in case that resource type is already been assigned to one of the user. Only after removing those roles from user policy, the delete would be successful.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Add or delete capabilities in a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "The request body contains the details of the role to be created.",
                        "name": "Resource",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "minItems": 1,
                            "maxItems": 2,
                            "$ref": "#/definitions/role.update.capability"
                        }
                    }
                ],
                "responses": {
                    "207": {
                        "description": "Multi-Status",
                        "schema": {
                            "$ref": "#/definitions/multi_status.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "delete": {
                "description": "This endpoint is used to delete a role. Please note that delete will be blocked and thrown error in case that resource type is already been assigned to one of the user. Only after removing those roles from user policy, the delete would be successful.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Role name",
                        "name": "role_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used retrieve a list of all the capabilities for the role.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Roles"
                ],
                "summary": "List all the capabilities for the role",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    },
                    {
                        "type": "string",
                        "description": "Role name",
                        "name": "role_name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/role.get"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/policies/{policy_id}": {
            "delete": {
                "description": "This endpoint is used to delete a policy.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Delete a policy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the policy that is being deleted.",
                        "name": "policy_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/policies/delete": {
            "post": {
                "description": "This endpoint is used to delete a list of policies.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Delete a list of policies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body includes a list of policy IDs that are being deleted.",
                        "name": "Policy",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policy.delete.list"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/policies": {
            "post": {
                "description": "This endpoint is used to create a new policy. If the request is successful, the response body will contain the newly created policy details.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Create a new policy",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains the details of the policy to be created.",
                        "name": "Policy",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/policy.create"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/policy.create.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "put": {
                "description": "This endpoint is used to update a list of policies.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Update a list of policies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "The request body contains a list of policy details to be updated.",
                        "name": "Policy",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/policy.update.list"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            },
            "get": {
                "description": "This endpoint is used to retrieve a list of all policies whose role associated with organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get a list of all policies whose role associated with organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}/policies": {
            "get": {
                "description": "This endpoint is used to retrieve a list of all policies whose role associated with workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get a list of all policies whose role associated with workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/my-policies": {
            "get": {
                "description": "This endpoint is used to retrieve a list of policies of the current user whose role is associate with this organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get a list of policies of the current user whose role is associate with this organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/users/{user_id}/policies": {
            "get": {
                "description": "This endpoint is used to retrieve a list of policies of the user whose role is associate with this organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get a list of policies of the user whose role is associate with this organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user to whom the policy belongs.",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}/users/{user_id}/policies": {
            "get": {
                "description": "This endpoint is used to retrieve a list of policies of the user whose role is associate with this workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get a list of policies of the user whose role is associate with this workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user to whom the policy belongs.",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/user-groups/{group_id}/policies": {
            "get": {
                "description": "This endpoint is used to retrieve a list of policies of the user group whose role is associate with this organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get a list of policies of the user group whose role is associate with this organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user group to which the policy belongs.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}/user-groups/{group_id}/policies": {
            "get": {
                "description": "This endpoint is used to retrieve a list of policies of the user group whose role is associate with this workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get a list of policies of the user group whose role is associate with this workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user group to which the policy belongs.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/role/{role_id}/policies": {
            "get": {
                "description": "This endpoint is used to retrieve a list of policies of the role which is associate with this organization.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get a list of policies of the role which is associate with this organization",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the role to which the policy belongs.",
                        "name": "role_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/workspaces/{workspace_id}/role/{role_id}/policies": {
            "get": {
                "description": "This endpoint is used to retrieve a list of policies of the role which is associate with this workspace.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get a list of policies of the role which is associate with this workspace",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Workspace ID",
                        "name": "workspace_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the role to which the policy belongs.",
                        "name": "role_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.list"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/users/{user_id}/policies/workspaces": {
            "get": {
                "description": "This endpoint used to retrieve workspaces of the user whose role is associated to those workspaces.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get workspaces of the user whose role is associated to those workspaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user to whom the policy belongs.",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.workspace.list.name"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/user-groups/{group_id}/policies/workspaces": {
            "get": {
                "description": "This endpoint used to retrieve workspaces of the user group whose role is associated to those workspaces.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Policy"
                ],
                "summary": "Get workspaces of the user group whose role is associated to those workspaces",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "The unique ID of the user group to which the policy belongs.",
                        "name": "group_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/policy.workspace.list.name"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/organizations/{organization_id}/acc-mappings": {
            "get": {
                "description": "This endpoint is used to retrieve m/OS organization to product account mappings.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Accounts"
                ],
                "summary": "Get m/OS organization to product account mappings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Organization ID",
                        "name": "organization_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page size.",
                        "name": "limit",
                        "in": "query",
                        "required": false,
                        "minimum": 1,
                        "maximum": 100
                    },
                    {
                        "type": "string",
                        "description": "Pagination cursor, value represent base64 string.",
                        "name": "cursor",
                        "in": "query",
                        "required": false,
                        "maxLength": 256
                    },
                    {
                        "type": "string",
                        "enum": [
                            "after",
                            "before"
                        ],
                        "description": "Pagination direction.",
                        "name": "direction",
                        "in": "query",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/acc_mappings.response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/account/reset-password": {
            "get": {
                "description": "This endpoint is used to access user invitation password recovery email link.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get password recovery code for the user invitation email link.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique invitation link id.",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Found"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/sso/provider": {
            "post": {
                "description": "This endpoint is used to get sso provider id for the given user email.\n1. When no sso provider is configured for the given domain then api returns 204(No Content).\n2. When m/OS account doesn't exist for the given email then api returns 422(Unprocessable Entity) with error message in the response body.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Public"
                ],
                "summary": "Get sso provider id for the given user email",
                "parameters": [
                    {
                        "description": "The request body includes the user email address.",
                        "name": "Sso",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/sso.provider.get.request"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/sso.provider.get.response"
                        }
                    },
                    "204": {
                        "description": "No content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "404": {
                        "description": "Not found",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        },
        "/validate-session": {
            "get": {
                "description": "This API serves the purpose of validating sessions for Social Sign-In users with valid associated m/OS accounts. Additionally, please note that in the Social Sign-In use-case, this should be the initial call following successful social authentication, before making any other API requests.\n\nNOTE: When m/OS account doesn't exist for the current logged-in social sign-in user then api returns 422(Unprocessable Entity) with error message in the response body",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Session"
                ],
                "summary": "Verify if there is an m/OS account associated with the currently logged-in social sign-in user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored.",
                        "name": "Cookie",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/validate.session.get.response"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error.response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "organization.create": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The unique name of the organization."
                },
                "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Optional. A brief description of the organization."
                },
                "website": {
                    "type": "string",
                    "format": "uri",
                    "maxLength": 1024,
                    "pattern": "^(https?|http?)://",
                    "description": "Optional. The URL of the organization's website."
                },
                "logo_url": {
                    "type": "string",
                    "maxLength": 1024,
                    "format": "uri",
                    "pattern": "^(https?|http?)://",
                    "description": "Optional. The path to the uploaded organization logo. Please note that you should upload the logo first and then use the URL path of the uploaded logo here."
                }
            }
        },
        "organization.update": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The current unique name of the organization that will be updated with new details."
                },
                "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Optional. A brief description of the organization."
                },
                "website": {
                    "type": "string",
                    "format": "uri",
                    "maxLength": 1024,
                    "pattern": "^(https?|http?)://",
                    "description": "Optional. The URL of the organization's website."
                },
                "logo_url": {
                    "type": "string",
                    "maxLength": 1024,
                    "format": "uri",
                    "pattern": "^(https?|http?)://",
                    "description": "Optional. The path to the uploaded organization logo. Please note that you should upload the logo first and then use the URL path of the uploaded logo here."
                }
            }
        },
        "organization.response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the organization."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the organization."
                },
                "website": {
                    "type": "string",
                    "description": "The URL of the organization's website."
                },
                "logo_url": {
                    "type": "string",
                    "description": "The path to the organization's logo."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the organization."
                },
                "created_time": {
                    "type": "string",
                    "description": "The creation time of the organization, expressed as a timestamp in UTC. For example: \"2014-10-02T15:01:23Z\"."
                },
                "updated_time": {
                    "type": "string",
                    "description": "The timestamp in UTC indicating the most recent modification time of the organization. For example: \"2014-10-02T15:01:23Z\"."
                },
                "created_by_user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique ID of the user who created this organization."
                },
                "updated_by_user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique ID of the user who updated this organization."
                }
            }
        },
        "organization.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of organization details included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "organizations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/organization.response"
                    }
                }
            }
        },
        "organization.work_space.create": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The unique name of the workspace."
                },
                "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Optional. A brief description of the workspace."
                }
            }
        },
        "organization.work_space.update": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The current unique name of the workspace that will be updated with new details."
                },
                "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Optional. A brief description of the organization."
                }
            }
        },
        "organization.work_space.response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the workspace."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workspace."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the workspace."
                },
                "created_time": {
                    "type": "string",
                    "description": "The creation time of the workspace, expressed as a timestamp in UTC. For example: \"2014-10-02T15:01:23Z\"."
                },
                "updated_time": {
                    "type": "string",
                    "description": "The timestamp in UTC indicating the most recent modification time of the workspace. For example: \"2014-10-02T15:01:23Z\"."
                },
                "created_by_user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique ID of the user who created this workspace."
                },
                "updated_by_user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique ID of the user who updated this workspace."
                }
            }
        },
        "organization.work_space.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of workspace details included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "workspaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/organization.work_space.response"
                    }
                }
            }
        },
        "resource.create": {
            "type": "object",
            "required": [
                "name",
                "type",
                "id"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The unique name of the resource."
                },
                "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Optional. A brief description of the resource."
                },
                "resource-type": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The name of the resource type that is already available in the system. Please note that you may need to configure and deploy a new resource type in the system if it is not already available. Presently there is no custom resource type available in the system."
                },
                "id": {
                    "type": "string",
                    "pattern": "^[ A-Za-z0-9-]*$",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "Unique ID of the actual resource which is managed or created by the product."
                },
                "product-name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The unique name of the product to which resource instance is created."
                }
            }
        },
        "resource.response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "description": "ID of the actual resource which is managed or created by the product."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the resource."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the resource."
                },
                "resource-type": {
                    "type": "string",
                    "description": "The resource type to which the registered resource belongs."
                },
                "product-name": {
                    "type": "string",
                    "description": "The name of the product to which this resource belons to."
                }
            }
        },
        "cookie.apikey": {
            "type": "object",
            "oneOf": [
                {
                    "properties": {
                        "Cookie": {
                            "type": "string",
                            "description": "Set the Cookie Header. Must include the HTTP Cookie Header which originally was received in the response \n\r\nheader of login session.\n\r\nExample : iam_session_id=a19iOVAbdzdgl70Rq1QZmrKmcjDtdsviCTZx7m9a9yHIUS8Wa9T7hvqyGTsLHi6Qifn2WUfpAKx9D\n\r\nWp0SJGleIn9vh2YF4A16id93kXFTgIgmwIOvbVAScyrx7yVl6bPZnCx27ec4WQDtaTewC1CpgudeDV2jQQnSaCP6ny\n\r\n3xa8qLH-QUgYqdQuoA_LF1phxgRCUfIrCLQOkolX5nv3ze_f== \n\r\n It is ok if more than one cookie are included here as all other cookies will be ignored."
                        }
                    },
                    "required": [
                        "Cookie"
                    ],
                    "additionalProperties": false
                },
                {
                    "properties": {
                        "X-API-KEY": {
                            "type": "apiKey",
                            "description": "Set the API-Key in Header. An API key is a special token that the client needs to provide when making API calls"
                        }
                    },
                    "required": [
                        "X-API-KEY"
                    ],
                    "additionalProperties": false
                }
            ]
        },
        "resources.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of resource details included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resource.response"
                    }
                }
            }
        },
        "user.traits": {
            "type": "object",
            "properties": {
                "meta_data": {
                    "type": "string",
                    "format": "json",
                    "description": "The meta data of the user, example: \"meta_data\": \"{\"avatar\": \"string\"}\""
                },
                "departments": {
                    "description": "List all the departments.",
                    "$ref": "#/definitions/department.list"
                }
            }
        },
        "team.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of user or user group details included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "team": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/team.response"
                    }
                }
            }
        },
        "team.response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID for the user or user group."
                },
                "is_user": {
                    "type": "boolean",
                    "description": "Response contains user or user group details. When true, it means user details, and when false, it means user group details."
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user or user group."
                },
                "user_first_name": {
                    "type": "string",
                    "description": "The first name of the user."
                },
                "user_last_name": {
                    "type": "string",
                    "description": "The last name of the user."
                },
                "user_display_name": {
                    "type": "string",
                    "description": "The display name of the user."
                },
                "user_group_name": {
                    "type": "string",
                    "description": "The name of the user group."
                },
                "traits": {
                    "description": "The user or user group traits.",
                    "$ref": "#/definitions/user.traits"
                },
                "created_time": {
                    "type": "string",
                    "description": "The creation time of the user or user group details, expressed as a timestamp in UTC. For example: \"2014-10-02T15:01:23Z\"."
                },
                "updated_time": {
                    "type": "string",
                    "description": "The timestamp in UTC indicating the most recent modification time of the user or user group details. For example: \"2014-10-02T15:01:23Z\"."
                },
                "invitation_status": {
                    "enum": [
                        "INVOKED",
                        "PENDING",
                        "ACCEPTED",
                        "REJECTED",
                        "EXPIRED"
                    ],
                    "description": "The status of the invitation, indicating whether it is invoked, pending, accepted, rejected or expired. If the user is self signed up then this field will be empty."
                },
                "policies": {
                    "description": "List all the policies.",
                    "$ref": "#/definitions/team_policy.list"
                }
            }
        },
        "delete_team_member": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID for either the user or user group. If is_user is true, this field contains the user ID. If is_user is false, this field contains the user group ID."
                },
                "is_user": {
                    "type": "boolean",
                    "description": "When true, it means the user will be deleting, and when false, it means that user group will be deleting."
                }
            }
        },
        "team.delete.list": {
            "type": "object",
            "properties": {
                "team": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 10,
                    "description": "The list of existing user IDs or user group IDS to be deleted.",
                    "items": {
                        "$ref": "#/definitions/delete_team_member"
                    }
                }
            }
        },
        "user.response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID for the user."
                },
                "email": {
                    "type": "string",
                    "format": "email",
                    "description": "The email address of the user."
                },
                "first_name": {
                    "type": "string",
                    "description": "The first name of the user."
                },
                "last_name": {
                    "type": "string",
                    "description": "The last name of the user."
                },
                "display_name": {
                    "type": "string",
                    "description": "The display name of the user."
                },
                "created_time": {
                    "type": "string",
                    "description": "The creation time of the user details, expressed as a timestamp in UTC. For example: \"2014-10-02T15:01:23Z\"."
                },
                "updated_time": {
                    "type": "string",
                    "description": "The timestamp in UTC indicating the most recent modification time of the user details. For example: \"2014-10-02T15:01:23Z\"."
                },
                "is_active": {
                    "type": "boolean",
                    "description": "Indicates whether the user is active or inactive."
                }
            }
        },
        "users.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of user details included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.response"
                    }
                }
            }
        },
        "permission": {
            "type": "object",
            "properties": {
                "operation": {
                    "type": "string",
                    "description": "The permitted operation for the resource."
                },
                "resource_type": {
                    "type": "string",
                    "description": "The operation that belongs to this resource type."
                }
            }
        },
        "roles": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the role."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role."
                },
                "permissions": {
                    "type": "array",
                    "description": "The list of permissions associated with the role.",
                    "items": {
                        "$ref": "#/definitions/permission"
                    }
                }
            }
        },
        "department.list": {
            "type": "array",
            "items": {
                "type": "string"
            }
        },
        "acc_mappings.response": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of account mappings included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "acc_mappings": {
                    "$ref": "#/definitions/acc_mappings.list"
                }
            }
        },
        "acc_mappings.list": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/acc_mapping"
            }
        },
        "acc_mapping": {
            "type": "object",
            "required": [
                "product",
                "account_id"
            ],
            "properties": {
                "product": {
                    "type": "string",
                    "enum": [
                        "Kochava",
                        "SAM"
                    ],
                    "description": "The product name."
                },
                "account_id": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The account id."
                },
                "api_key": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 128,
                    "description": "The api key."
                }
            }
        },
        "team.multi.status.response": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/multistatus.error.response"
            }
        },
        "team_policy.list": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/team_user_policy"
            }
        },
        "team_user_policy": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the policy."
                },
                "role_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the role to which this policy is associated."
                },
                "role_name": {
                    "type": "string",
                    "description": "The role with which the policy is associated."
                }
            }
        },
        "user_policy.list": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/user_policy"
            }
        },
        "user_policy": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the policy."
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "ORG",
                        "WS"
                    ],
                    "description": "The level at which the role is associated. For example, \"ORG\" represents organization level, and \"WS\" represents workspace level."
                },
                "level_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization ID. If the level is \"WS\", then this field contains the workspace ID."
                },
                "level_name": {
                    "type": "string",
                    "description": "The name of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization name. If the level is \"WS\", then this field contains the workspace name."
                },
                "role_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the role to which this policy is associated."
                },
                "role_name": {
                    "type": "string",
                    "description": "The role with which the policy is associated."
                }
            }
        },
        "policy.create": {
            "type": "object",
            "required": [
                "is_user",
                "user_or_group_id",
                "level",
                "level_id",
                "role_name"
            ],
            "properties": {
                "is_user": {
                    "type": "boolean",
                    "description": "The policy is for either a user or a user group. When true, it means the policy is for a user, and when false, it means the policy is for a user group."
                },
                "user_or_group_id": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "format": "uuid",
                    "description": "The generated unique ID for either the user or user group. If is_user is true, this field contains the user ID. If is_user is false, this field contains the user group ID."
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "ORG",
                        "WS"
                    ],
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The level at which the role is associated. For example, \"ORG\" represents organization level, and \"WS\" represents workspace level."
                },
                "level_id": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "format": "uuid",
                    "description": "The generated unique ID of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization ID. If the level is \"WS\", then this field contains the workspace ID."
                },
                "role_name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The role with which the policy is associated."
                }
            }
        },
        "policy.update.list": {
            "type": "object",
            "properties": {
                "update_policies": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 10,
                    "items": {
                        "$ref": "#/definitions/policy.update"
                    }
                }
            }
        },
        "policy.update": {
            "type": "object",
            "required": [
                "operation"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the policy. This field is optional when creating a new policy but mandatory when updating or deleting an existing policy."
                },
                "operation": {
                    "type": "string",
                    "enum": [
                        "0",
                        "1",
                        "2"
                    ],
                    "description": "The action to be performed on the policy request. \n\r\n0: Add a new policy (the ID should be empty in this case).\n\r\n1: Update an existing policy (the ID should contain the existing policy ID).\n\r\n2: Delete an existing policy (the ID should contain the existing policy ID)."
                },
                "is_user": {
                    "type": "boolean",
                    "description": "The create or update or delete policy is associated with either a user or a user group. When set to true, it indicates that the policy is for a user. When set to false, it indicates that the policy is for a user group. This field is mandatory when creating a new policy or updating an existing policy, optional incase of deleting existing policy."
                },
                "user_or_group_id": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "format": "uuid",
                    "description": "The generated unique ID for either the user or the user group. If is_user is true, then this field contains the user ID. If is_user is false, then this field contains the user group ID. This field is mandatory when creating a new policy or updating an existing policy, optional incase of deleting existing policy."
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "ORG",
                        "WS"
                    ],
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The level at which the role is associated. For example, \"ORG\" represents organization level, and \"WS\" represents workspace level. This field is mandatory when creating a new policy or updating an existing policy, optional incase of deleting existing policy."
                },
                "level_id": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "format": "uuid",
                    "description": "The generated unique ID of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization ID. If the level is \"WS\", then this field contains the workspace ID. This field is mandatory when creating a new policy or updating an existing policy, optional incase of deleting existing policy."
                },
                "role_name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The role with which the policy is associated. This field is mandatory when creating a new policy or updating an existing policy, optional incase of deleting existing policy."
                }
            }
        },
        "policy.response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the policy."
                },
                "is_user": {
                    "type": "boolean",
                    "description": "The policy is associated with either a user or a user group. When set to true, it indicates that the policy is for a user. When set to false, it indicates that the policy is for a user group."
                },
                "user_or_group_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID for either the user or user group. If is_user is true, this field contains the user ID. If is_user is false, this field contains the user group ID."
                },
                "user_or_group_name": {
                    "type": "string",
                    "description": "The name of the user or user group associated with the policy. If is_user is true, then this field contains the user name. If is_user is false, then this field contains the user group name."
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "ORG",
                        "WS"
                    ],
                    "description": "The level at which the role is associated. For example, \"ORG\" represents organization level, and \"WS\" represents workspace level."
                },
                "level_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization ID. If the level is \"WS\", then this field contains the workspace ID."
                },
                "level_name": {
                    "type": "string",
                    "description": "The name of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization name. If the level is \"WS\", then this field contains the workspace name."
                },
                "role_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the role to which this policy is associated."
                },
                "role_name": {
                    "type": "string",
                    "description": "The role with which the policy is associated."
                }
            }
        },
        "policy.create.response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the policy."
                },
                "is_user": {
                    "type": "boolean",
                    "description": "The policy is for either a user or a user group. When true, it means the policy is for a user, and when false, it means the policy is for a user group."
                },
                "user_or_group_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID for either the user or the user group. If is_user is true, then this field contains the user ID. If is_user is false, then this field contains the user group ID."
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "ORG",
                        "WS"
                    ],
                    "description": "The level at which the role is associated. For example, \"ORG\" represents organization level, and \"WS\" represents workspace level."
                },
                "level_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization ID. If the level is \"WS\", then this field contains the workspace ID."
                },
                "role_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the role to which this policy is associated."
                },
                "created_by_user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique ID of the user who created this policy."
                },
                "updated_by_user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique ID of the user who updated this policy."
                }
            }
        },
        "policy.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of policies included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "policies": {
                    "type": "array",
                    "description": "List all the policies.",
                    "items": {
                        "$ref": "#/definitions/policy.response"
                    }
                }
            }
        },
        "policy.workspace.list.name": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of workspaces included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "workspaces": {
                    "type": "array",
                    "description": "A list of workspace names.",
                    "items": {
                        "$ref": "#/definitions/workspace"
                    }
                }
            }
        },
        "invite.invitationData.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of invitations included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "invitations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/invite.invitationData"
                    }
                }
            }
        },
        "invite.invitationData": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the invitation."
                },
                "inviter_name": {
                    "type": "string",
                    "description": "The name of the invited user."
                },
                "inviter_email": {
                    "type": "string",
                    "description": "The email address of the invited user."
                },
                "inviter_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the invited user."
                },
                "invitee_name": {
                    "type": "string",
                    "description": "The name of the invitee who received the invitation."
                },
                "invitee_email": {
                    "type": "string",
                    "description": "The email address of the invitee who received the invitation."
                },
                "invitee_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the invitee who received the invitation."
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "INVOKED",
                        "PENDING",
                        "ACCEPTED",
                        "REJECTED",
                        "EXPIRED"
                    ],
                    "description": "The status of the invitation, indicating whether it is invoked, pending, accepted, rejected \n\r\nor expired."
                },
                "created_time": {
                    "type": "string",
                    "description": "The creation time of the invitation, expressed as a timestamp in UTC. \n\r\nFor example: \"2014-10-02T15:01:23Z\"."
                },
                "updated_time": {
                    "type": "string",
                    "description": "The timestamp in UTC indicating the most recent modification time of the invitation. \n\r\nFor example: \"2014-10-02T15:01:23Z\"."
                },
                "roles": {
                    "type": "array",
                    "description": "The list of roles to which the user has been invited.",
                    "items": {
                        "$ref": "#/definitions/invite.roleData"
                    }
                }
            }
        },
        "invitation.sent.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of invitations included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "invitations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/invitation.sent"
                    }
                }
            }
        },
        "invitation.sent": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the invitation."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the inviter for received invitation or invitee for sent invitation."
                },
                "email": {
                    "type": "string",
                    "description": "The email address of the inviter for received invitation or invitee for sent invitation."
                },
                "user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the inviter for received invitation or invitee for sent invitation."
                },
                "status": {
                    "type": "string",
                    "enum": [
                        "INVOKED",
                        "PENDING",
                        "ACCEPTED",
                        "REJECTED",
                        "EXPIRED"
                    ],
                    "description": "The status of the invitation, indicating whether it is invoked, pending, accepted, rejected or expired."
                },
                "created_time": {
                    "type": "string",
                    "description": "The creation time of the invitation, expressed as a timestamp in UTC. For example: \"2014-10-02T15:01:23Z\"."
                },
                "updated_time": {
                    "type": "string",
                    "description": "The timestamp in UTC indicating the most recent modification time of the invitation. For example: \"2014-10-02T15:01:23Z\"."
                },
                "roles": {
                    "type": "array",
                    "description": "The list of roles to which the user has been invited.",
                    "items": {
                        "$ref": "#/definitions/invite.roleData"
                    }
                }
            }
        },
        "invite.roleData": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the role to which the user has been invited."
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "ORG",
                        "WS"
                    ],
                    "description": "The level at which the role is associated. For example, \"ORG\" represents organization level, and \"WS\" represents workspace level."
                },
                "level_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization ID. If the level is \"WS\", then this field contains the workspace ID."
                },
                "level_name": {
                    "type": "string",
                    "description": "The name of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization name. If the level is \"WS\", then this field contains the workspace name."
                }
            }
        },
        "model.user.group": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The name of the user group."
                },
                "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Optional. A brief description of the user group."
                }
            }
        },
        "model.user.groups.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of user group details included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "user_groups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.user.groups"
                    }
                }
            }
        },
        "model.user.groups": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the user group."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the user group."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the user group."
                },
                "created_time": {
                    "type": "string",
                    "description": "The creation time of the user group, expressed as a timestamp in UTC. For example: \"2014-10-02T15:01:23Z\"."
                },
                "updated_time": {
                    "type": "string",
                    "description": "The timestamp in UTC indicating the most recent modification time of the user group. For example: \"2014-10-02T15:01:23Z\"."
                },
                "created_by_user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique ID of the user who created this user group."
                },
                "updated_by_user_id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The unique ID of the user who updated this user group."
                }
            }
        },
        "invite.acceptInvite": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "ACCEPT",
                        "REJECT"
                    ],
                    "description": "Accept or reject the organization invitation."
                }
            }
        },
        "user.invite": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 128,
                    "format": "email",
                    "description": "The email address of the invited user."
                },
                "first_name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "Optional. The first name of the invited user."
                },
                "last_name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "Optional. The last name of the invited user."
                },
                "roles": {
                    "type": "array",
                    "minItems": 0,
                    "maxItems": 20,
                    "description": "Optional. List of roles the invited user would be assigned to.",
                    "items": {
                        "$ref": "#/definitions/user.invite.role"
                    }
                }
            }
        },
        "user.invite.role": {
            "type": "object",
            "required": [
                "role",
                "level",
                "level_id"
            ],
            "properties": {
                "role": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The name of the role to which the user will be invited."
                },
                "level": {
                    "type": "string",
                    "enum": [
                        "ORG",
                        "WS"
                    ],
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The level at which role is associated. For example, \"ORG\" represents organization level, and \"WS\" represents workspace level."
                },
                "level_id": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "format": "uuid",
                    "description": "The generated unique ID of the organization or workspace depends on the level. If the level is \"ORG\", then this field contains the organization ID. If the level is \"WS\", then this field contains the workspace ID."
                }
            }
        },
        "multi_status.response": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/multistatus.error.response"
            }
        },
        "error.response": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Error code. \n\r\nDetails of error code is available at https://docs.google.com/spreadsheets/d/139Vb5s4bqv7HthlJHRpUDyBBm-533YsRvc8cHIf6CT8/edit#gid=0"
                },
                "message": {
                    "type": "string",
                    "description": "Error reason. \n\r\nDetails of error reason is available at https://docs.google.com/spreadsheets/d/139Vb5s4bqv7HthlJHRpUDyBBm-533YsRvc8cHIf6CT8/edit#gid=0"
                },
                "type": {
                    "type": "string",
                    "description": "Error type, example: error, warning."
                },
                "context": {
                    "type": "string",
                    "description": "Additional information related to error."
                }
            }
        },
        "multistatus.error.response": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "description": "HTTP status code."
                },
                "id": {
                    "type": "integer",
                    "description": "Error code. \n\r\nDetails of error code is available at https://docs.google.com/spreadsheets/d/139Vb5s4bqv7HthlJHRpUDyBBm-533YsRvc8cHIf6CT8/edit#gid=0"
                },
                "message": {
                    "type": "string",
                    "description": "Error reason. \n\r\nDetails of error reason is available at https://docs.google.com/spreadsheets/d/139Vb5s4bqv7HthlJHRpUDyBBm-533YsRvc8cHIf6CT8/edit#gid=0"
                },
                "type": {
                    "type": "string",
                    "description": "Error type, example: error, warning."
                },
                "context": {
                    "type": "string",
                    "description": "Additional information related to error."
                }
            }
        },
        "user.id.invite": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "user_ids": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 20,
                    "description": "The list of user IDs to be added to the user group.",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            }
        },
        "policy.delete.list": {
            "type": "object",
            "properties": {
                "policy_ids": {
                    "type": "array",
                    "minItems": 1,
                    "maxItems": 10,
                    "description": "The list of existing policy IDs to be deleted.",
                    "items": {
                        "type": "string",
                        "format": "uuid"
                    }
                }
            }
        },
        "upload.response": {
            "type": "object",
            "properties": {
                "logo_url": {
                    "type": "string",
                    "description": "The URL path of the organization logo."
                }
            }
        },
        "logo.download": {
            "type": "object",
            "required": [
                "logo_url"
            ],
            "properties": {
                "logo_url": {
                    "type": "string",
                    "description": "The URL path of the organization logo."
                }
            }
        },
        "workspace": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The generated unique ID of the workspace."
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workspace."
                }
            }
        },
        "sso.provider.get.request": {
            "type": "object",
            "required": [
                "email"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "minLength": 3,
                    "maxLength": 128,
                    "description": "The email address of the user."
                }
            }
        },
        "sso.provider.get.response": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The sso provider id."
                }
            }
        },
        "validate.session.get.response": {
            "type": "object",
            "required": [
                "userId"
            ],
            "properties": {
                "userId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "The m/OS user id."
                }
            }
        },
        "resource.type.create": {
            "type": "object",
            "required": [
                "name",
                "operations"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The unique name of the resource type."
                },
                "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Optional. A brief description of the resource type."
                },
                "operations": {
                    "type": "array",
                    "description": "The permitted operation of the resource type.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "resource.type.operations": {
            "type": "object",
            "required": [
                "action",
                "operations"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "0",
                        "1"
                    ],
                    "description": "The action to be performed on the operations list of the resource type. \n\r\n1: Add a list of operations to existing resource type.\n\r\n0: Delete a list of operations from existing resource type."
                },
                "operations": {
                    "type": "array",
                    "description": "The permitted operation for the resource type.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "resource.types.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of roles included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "resource_types": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resource.types"
                    }
                }
            }
        },
        "resource.types": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the resource type."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the resource type."
                },
                "operations": {
                    "type": "array",
                    "description": "The permitted operation of the resource type.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "role.capability.create": {
            "type": "object",
            "required": [
                "name",
                "resource_type",
                "operation"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The unique name of the role capability."
                },
                "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Optional. A brief description of the capability."
                },
                "resource_type": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The unique name of the resource type which is already available in the system."
                },
                "operation": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The operation of the rersource type which is already available in the system."
                }
            }
        },
        "role.capability.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of roles included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "capability_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/role.capability.get"
                    }
                }
            }
        },
        "role.capability.get": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the role capability."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the capability."
                },
                "resource_type": {
                    "type": "string",
                    "description": "The unique name of the resource type."
                },
                "operation": {
                    "type": "string",
                    "description": "The operation of the rersource type."
                }
            }
        },
        "resource.capability.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of roles included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "capability_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/resource.capability.get"
                    }
                }
            }
        },
        "resource.capability.get": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the role capability."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the capability."
                },
                "operation": {
                    "type": "string",
                    "description": "The operation of the rersource type."
                }
            }
        },
        "role.update.capability": {
            "type": "object",
            "required": [
                "action",
                "capability_list"
            ],
            "properties": {
                "action": {
                    "type": "string",
                    "enum": [
                        "0",
                        "1"
                    ],
                    "description": "The action to be performed on the capabilities list in role. \n\r\n1: Add a list of capabilities to existing role.\n\r\n0: Delete a list of capabilities from existing role."
                },
                "capability_list": {
                    "type": "array",
                    "description": "List of capabilities name.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "role.create": {
            "type": "object",
            "required": [
                "name",
                "scope",
                "capability_list"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 64,
                    "description": "The unique name of the role."
                },
                "description": {
                    "type": "string",
                    "maxLength": 512,
                    "description": "Optional. A brief description of the role."
                },
                "scope": {
                    "type": "string",
                    "enum": [
                        "ORG",
                        "WS",
                        "BOTH",
                        "GLOBAL"
                    ],
                    "description": "The scope at which the role is associated. For example, \"ORG\" represents organization level, and \"WS\" represents workspace level."
                },
                "capability_list": {
                    "type": "array",
                    "description": "List of capabilities name.",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "role.get": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The unique name of the role."
                },
                "description": {
                    "type": "string",
                    "description": "A brief description of the role."
                },
                "scope": {
                    "type": "string",
                    "description": "The scope at which the role is associated. For example, \"ORG\" represents organization level, and \"WS\" represents workspace level."
                },
                "capability_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/role.capability.get"
                    }
                }
            }
        },
        "role.list": {
            "type": "object",
            "properties": {
                "total_count": {
                    "type": "integer",
                    "description": "The number of roles included in the response."
                },
                "prev_cursor": {
                    "type": "string",
                    "description": "The previous cursor used for backward pagination, omittable."
                },
                "next_cursor": {
                    "type": "string",
                    "description": "The next cursor used for forward pagination, omittable."
                },
                "role_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/role.get"
                    }
                }
            }
        }
    }
}
